public class Cake 
{
	//properties of cakes
	
	//a property that stores the cake's flavor
	String cakeFlavor = new String("Vanilla");
	
	//a property that stores the amount of layers a cake has
	int layers;
	
	
	/**
	 * This allows for both the flavor and amount of layers to be
	 * changed.
	 * 
	 * @param flavor (determines the flavor of the cake)
	 * @param layers (determined the amount of layers the cake has)
	 */
	public Cake(String flavor, int layers) 
	{
		this.cakeFlavor = flavor;
		
		this.layers = layers;
	}
	
	/**
	 * This allows us to instantiate an object.
	 * This method will always make the cake a 1 tier/layer cake.
	 * @param flavor (determines the flavor of the cake)
	 * @return 
	 */
	public Cake(String flavor) 
	{
		//assign a flavor to this cake as it is created
		this.cakeFlavor = flavor;
		
		//assigns the default amount of layers of the cake, 1.
		this.layers = 1;
	}
	/**
	 * This method prints out the inputed flavor of the cake.
	 */
	public void getFlavor()
	{
		System.out.println("This is a " + this.cakeFlavor + " cake.");
	}
	/**
	 * This method prints out how many layers the cake has.  If the 
	 * user gives an input of layers then it will print the user's input, if not
	 * it will use the default amount of layers. (1)
	 */
	public void getLayers()
	{
		System.out.println("This cake has " + this.layers + " layer(s).");
	}
	/**
	 * This method lets the user input a new flavor so they can
	 * change the flavor of the cake.
	 * @param newFlave (determines the new flavor of the cake)
	 */
	public void setFlavor(String newFlave) 
	{
		this.cakeFlavor = newFlave;
	}
	/**
	 * This method prints/tells if the cake is yummy.
	 * The cake is ALWAYS yummy.
	 */
	public static void tellIfYummy() 
	{
		System.out.println("The cake is so supa yum yum!");
	}
	/**
	 * This method allows user to add one layer at a time to
	 * the cake when called.
	 */
	public void incrementLayers() 
	{
		this.layers = layers + 1;
	}

}
